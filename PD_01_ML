{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2faykPq_lMP0"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import requests\n",
        "from io import StringIO\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Link do pliku CSV\n",
        "url = 'https://raw.githubusercontent.com/SzymonNowakowski/Machine-Learning-2024/master/PCA_three_clusters_data.csv'\n",
        "\n",
        "try:\n",
        "    # Pobierz plik z linku\n",
        "    print(\"Pobieranie pliku z linku...\")\n",
        "    response = requests.get(url)\n",
        "    response.raise_for_status()  # Sprawdź, czy nie ma błędów\n",
        "\n",
        "    # Załaduj dane do Pandas\n",
        "    print(\"Ładowanie danych do Pandas...\")\n",
        "    data = pd.read_csv(StringIO(response.text))\n",
        "    print(\"Dane załadowane pomyślnie.\")\n",
        "    print(\"Pierwsze 5 wierszy danych:\")\n",
        "    print(data.head())\n",
        "\n",
        "    # Podział na cechy i etykiety\n",
        "    print(\"\\nPrzygotowanie danych do analizy...\")\n",
        "    X = data.iloc[:, :-1].values  # Wszystkie kolumny oprócz ostatniej (cechy)\n",
        "    y = data.iloc[:, -1].values   # Ostatnia kolumna (etykiety klas)\n",
        "\n",
        "    # Standaryzacja danych\n",
        "    print(\"Standaryzacja danych...\")\n",
        "    scaler = StandardScaler()\n",
        "    X_std = scaler.fit_transform(X)\n",
        "\n",
        "    # Wykonanie PCA\n",
        "    print(\"Wykonywanie PCA...\")\n",
        "    pca = PCA(n_components=2)\n",
        "    X_pca = pca.fit_transform(X_std)\n",
        "\n",
        "    # Wizualizacja wyników PCA\n",
        "    print(\"Tworzenie wykresu PCA...\")\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    for cluster in np.unique(y):\n",
        "        plt.scatter(X_pca[y == cluster, 0], X_pca[y == cluster, 1], label=f'Klasa {cluster}')\n",
        "    plt.xlabel('Główna składowa 1')\n",
        "    plt.ylabel('Główna składowa 2')\n",
        "    plt.title('PCA zbioru danych')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "    # Wizualizacja oryginalnych par cech\n",
        "    print(\"\\nWizualizacja oryginalnych par cech...\")\n",
        "    fig, axes = plt.subplots(1, 3, figsize=(18, 6))\n",
        "\n",
        "    # x vs y\n",
        "    axes[0].scatter(X[:, 0], X[:, 1], c=y)\n",
        "    axes[0].set_xlabel('x')\n",
        "    axes[0].set_ylabel('y')\n",
        "    axes[0].set_title('x vs y')\n",
        "\n",
        "    # x vs z\n",
        "    axes[1].scatter(X[:, 0], X[:, 2], c=y)\n",
        "    axes[1].set_xlabel('x')\n",
        "    axes[1].set_ylabel('z')\n",
        "    axes[1].set_title('x vs z')\n",
        "\n",
        "    # y vs z\n",
        "    axes[2].scatter(X[:, 1], X[:, 2], c=y)\n",
        "    axes[2].set_xlabel('y')\n",
        "    axes[2].set_ylabel('z')\n",
        "    axes[2].set_title('y vs z')\n",
        "\n",
        "    plt.show()\n",
        "\n",
        "    # Odpowiedź na pytania\n",
        "    print(\"\\nOdpowiedź na pytania:\")\n",
        "    print(\"1. Czy PCA poprawia separację klas w porównaniu z oryginalnymi cechami?\")\n",
        "    print(\"Tak, PCA często poprawia separację klas, ponieważ przekształca dane w nowy układ współrzędnych, gdzie osie (główne składowe) są wyrównane w kierunkach maksymalnej wariancji. W przestrzeni PCA klasy są często lepiej widoczne, zwłaszcza gdy oryginalne cechy są skorelowane.\")\n",
        "\n",
        "    print(\"\\n2. Dlaczego standaryzacja jest konieczna przed PCA?\")\n",
        "    print(\"Standaryzacja jest konieczna, ponieważ PCA jest wrażliwe na skalę danych. Jeśli cechy są w różnych skalach, główne składowe będą preferować cechy o większej wariancji, co może prowadzić do błędnych wyników. Standaryzacja zapewnia, że każda cecha wnosi równy wkład do analizy.\")\n",
        "\n",
        "except requests.exceptions.RequestException as e:\n",
        "    print(f\"Błąd podczas pobierania pliku: {e}\")\n",
        "except Exception as e:\n",
        "    print(f\"Błąd podczas przetwarzania danych: {e}\")"
      ]
    }
  ]
}

# PCA Homework Assignment

This repository contains the Colab notebook for the PCA homework assignment.

[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/MaksymilianSzymczak/ML24/blob/main/PD_01_ML.ipynb)
